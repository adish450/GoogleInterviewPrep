/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();

        if (root == null) {
            return ans;
        }

        Deque<TreeNode> queue = new ArrayDeque<>();

        int count = 0;
        queue.addLast(root);

        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            Deque<TreeNode> q1 = new ArrayDeque<>();
            for (int i = 0; i < size; i++) {
                TreeNode rn;
                if (count % 2 == 0) {
                    rn = queue.removeLast();
                    if (rn.left != null) {
                        q1.addLast(rn.left);
                    }

                    if (rn.right != null) {
                        q1.addLast(rn.right);
                    }
                } else {
                    rn = queue.removeLast();

                    if (rn.right != null) {
                        q1.addLast(rn.right);
                    }

                    if (rn.left != null) {
                        q1.addLast(rn.left);
                    }
                }

                list.add(rn.val);
            }
            queue = q1;
            ans.add(list);
            count++;
        }

        return ans;
    }
}