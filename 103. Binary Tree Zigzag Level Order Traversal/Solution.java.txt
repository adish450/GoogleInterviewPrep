/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();

        if (root == null) {
            return ans;
        }

        Deque<TreeNode> queue = new ArrayDeque<>();
        boolean isFromLeft = true;
        queue.addLast(root);

        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode rn = queue.removeFirst();

                if (isFromLeft) {
                    list.addLast(rn.val);
                } else {
                    list.addFirst(rn.val);
                }

                if (rn.left != null) {
                    queue.addLast(rn.left);
                }

                if (rn.right != null) {
                    queue.addLast(rn.right);
                }
            }
            ans.add(list);
            isFromLeft = !isFromLeft;
        }

        return ans;
    }
}