/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer, Integer> map = new HashMap<>();
        // hash value for finding in O(1)
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }

        return buildTree(preorder, inorder, map, 0, preorder.length - 1, 0, inorder.length - 1);

    }

    private TreeNode buildTree(int[] preorder, int[] inorder, HashMap<Integer, Integer> map, int startPre, int endPre,
            int startIn, int endIn) {

        if (startPre > endPre || startIn > endIn) {
            return null;
        }

        // construct node from preOrder
        TreeNode node = new TreeNode(preorder[startPre]);

        int nodeIndexIn = map.get(preorder[startPre]);

        // construct left
        node.left = buildTree(preorder, inorder, map, startPre + 1, startPre + (nodeIndexIn - startIn), startIn,
                nodeIndexIn - 1);
		// construct right
        node.right = buildTree(preorder, inorder, map, startPre + (nodeIndexIn - startIn) + 1, endPre, nodeIndexIn + 1,
                endIn);

        return node;
    }
}