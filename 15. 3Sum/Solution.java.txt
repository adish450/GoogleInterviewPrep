class Solution {
    
    public List<List<Integer>> threeSum(int[] nums) {

        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        // 2 pointer approach
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (i == 0 || nums[i - 1] != nums[i]) {
                twoSumII(nums, i, ans);
            }
        }

        return ans;
    }

    private void twoSumII(int[] nums, int i, List<List<Integer>> ans) {

        // apply 2 sum
        int left = i + 1;
        int right = nums.length - 1;

        while (left < right) {
            int sum = nums[left] + nums[right] + nums[i];
            if (sum < 0) {
                left++;
            } else if (sum > 0) {
                right--;
            } else {
                // answer found
                ans.add(Arrays.asList(nums[left++], nums[right--], nums[i]));
                // remove duplicates
                while (left < right && nums[left - 1] == nums[left])
                    left++;
            }

        }
    }
}