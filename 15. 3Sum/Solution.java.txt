class Solution {

    public List<List<Integer>> threeSum(int[] nums) {

        int n = nums.length;
        List<List<Integer>> ans = new ArrayList<>();
        // HashMap approach
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0)
                break;
            if (i == 0 || nums[i - 1] != nums[i]) {
                twoSum(nums, i, ans);
            }
        }

        return ans;
    }

    private void twoSum(int[] nums, int i, List<List<Integer>> ans) {
        Set<Integer> set = new HashSet<>();
        for (int j = i + 1; j < nums.length; j++) {
            // check if complement is present in map
            int sum = nums[i] + nums[j];
            if(set.contains(-sum)) {
                // answer found
                ans.add(Arrays.asList(nums[i], nums[j], -sum));
                while (j < nums.length - 1 && nums[j] == nums[j+1]) {
                    j++;
                }
            }

            set.add(nums[j]);
        }
    }
}