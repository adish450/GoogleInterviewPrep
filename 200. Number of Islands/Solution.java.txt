class Solution {
    public int numIslands(char[][] grid) {

        int count = 0;
        int n = grid.length;
        int m = grid[0].length;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    dfs(i, j, n, m, grid);
                }
            }
        }

        return count;

    }

    private void dfs(int x, int y, int n, int m, char[][] grid) {

        if (x > n - 1 || x < 0 || y > m - 1 || y < 0 || grid[x][y] == '0') {
            return;
        }

        grid[x][y] = '0';

        int[] X = { -1, 0, 1, 0 };
        int[] Y = { 0, 1, 0, -1 };

        for (int i = 0; i < 4; i++) {
            dfs(x + X[i], y + Y[i], n, m, grid);
        }
    }
}