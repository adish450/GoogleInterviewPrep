/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {

        ListNode head = new ListNode(0);
        ListNode point = head;

        PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>(new Comparator<ListNode>() {
            @Override
            public int compare(ListNode l1, ListNode l2) {
                if (l1.val > l2.val)
                    return 1;
                else if (l1.val < l2.val)
                    return -1;
                else
                    return 0;

            }
        });

        // add head of each list in pq
        for (ListNode node : lists) { // O(k)
            if (node != null) {
                pq.add(node);
            }
        }

        // make answer from list
        while (!pq.isEmpty()) { // O(N)
            point.next = pq.poll(); // O(logk)
            point = point.next;
            if (point.next != null) {
                pq.add(point.next);
            }
        }

        return head.next;

    }
}