class Solution {
    public void nextPermutation(int[] nums) {
        // if the array is in descreasing order just reverse

        int n = nums.length;
        int i = n - 1;
        boolean isDecreasing = true;
        while(i > 0) {
            if (nums[i-1] < nums[i]) {
                isDecreasing = false;
            }
            i--;
        }

        if (isDecreasing) {
            //reverse
            reverse(nums,i,n-1);
        } else {
            i = n - 1;

            while (i > 0 && nums[i-1] >= nums[i]) {
                i--;
            }

            //find the next greater and replace it
            for (int j = n-1; j >= i; j--) {
                if (nums[j] > nums[i-1]) {
                    swap(nums,i-1,j);
                    break;
                }
            }

            //reverse the remaining array to find the next smallest perm
            reverse(nums,i,n-1);
        }
    }

    private void reverse(int[] nums, int i, int j) {
        int left = i;
        int right = j;

        while(left <= right) {
            swap(nums,left,right);
            left++;
            right--;
        }
    }

    private void swap(int[] nums, int left, int right){
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}