/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        // LRN
        List<Integer> ans = new ArrayList<>();
        if (root == null)
            return ans;

        Stack<TreeNode> stack = new Stack<>();

        TreeNode node = root;
        TreeNode temp = null;

        while (node != null || !stack.isEmpty()) {
            if (node != null) {
                // traverse for left node
                stack.push(node);
                node = node.left;
            } else {
                // traverse for right node
                temp = stack.peek().right;
                if (temp == null) {
                    // left and right both are over so add to answer
                    temp = stack.pop();
                    ans.add(temp.val);

                    // remove all the nodes which have been processed for both left and right
                    // subtree
                    while (!stack.isEmpty() && temp == stack.peek().right) {
                        temp = stack.pop();
                        ans.add(temp.val);
                    }

                    if (!stack.isEmpty())
                        node = stack.peek().right;
                    else
                        node = null;
                } else {
                    node = temp;
                }
            }

        }

        return ans;

    }
}