/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }

        List<Integer> ans = new ArrayList<>();
        ans.add(root.val);
        if (isLeaf(root))
            return ans;

        // first travel left
        traverseLeft(root.left, ans);
        // then traverse inorder
        traverseBottom(root, ans);
        // then traverse right
        traverseRight(root.right, ans);

        return ans;
    }

    private boolean isLeaf(TreeNode node) {
        return node.left == null && node.right == null;
    }

    private void traverseLeft(TreeNode node, List<Integer> ans) {
        while (node != null) {
            if (!isLeaf(node))
                ans.add(node.val);
            if (node.left != null) {
                node = node.left;
            } else {
                node = node.right;
            }
        }
    }

    private void traverseBottom(TreeNode node, List<Integer> ans) {
        if (node == null) {
            return;
        }
        if (isLeaf(node)) {
            ans.add(node.val);
            return;
        }

        traverseBottom(node.left, ans);
        traverseBottom(node.right, ans);
    }

    private void traverseRight(TreeNode node, List<Integer> ans) {
        LinkedList<Integer> list = new LinkedList<Integer>();
        while (node != null) {
            if (!isLeaf(node))
                list.addFirst(node.val);
            if (node.right != null) {
                node = node.right;
            } else {
                node = node.left;
            }
        }

        ans.addAll(list);
    }

}