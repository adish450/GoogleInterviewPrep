/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    private class Pair {
        TreeNode node;
        int index;

        private Pair(TreeNode node, int index) {
            this.node = node;
            this.index = index;
        }
    }

    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int ans = Integer.MIN_VALUE;
        LinkedList<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root, 0));

        // level order traversal
        while (!queue.isEmpty()) {
            int size = queue.size();
            int minIndex = -1;
            int maxIndex = -1;
            for (int i = 0; i < size; i++) {
                Pair rp = queue.removeFirst();
                if (i == 0)
                    minIndex = rp.index;

                if (i == size - 1)
                    maxIndex = rp.index;

                if (rp.node.left != null) {
                    queue.add(new Pair(rp.node.left, 2 * (rp.index - minIndex) + 1));
                }

                if (rp.node.right != null) {
                    queue.add(new Pair(rp.node.right, 2 * (rp.index - minIndex) + 2));
                }
            }

            ans = Math.max(ans, maxIndex - minIndex + 1);
        }

        return ans;
    }
}