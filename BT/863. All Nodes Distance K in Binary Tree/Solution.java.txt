/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    private class Pair {
        TreeNode node;
        int dist;

        private Pair(TreeNode node, int dist) {
            this.node = node;
            this.dist = dist;
        }
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        if (root == null) {
            return new ArrayList<>();
        }
        // store parent of each node
        HashMap<TreeNode, TreeNode> map = new HashMap<>();
        dfs(root, map);

        // apply bfs from target
        LinkedList<Pair> queue = new LinkedList<>();
        queue.addLast(new Pair(target, 0));
        List<Integer> ans = new ArrayList<>();
        boolean[] visited = new boolean[501];

        while (!queue.isEmpty()) {
            Pair rp = queue.removeFirst();
            visited[rp.node.val] = true;
            if (rp.dist == k) {
                ans.add(rp.node.val);
                continue;
            }

            // add children
            if (rp.node.left != null && !visited[rp.node.left.val]) {
                queue.addLast(new Pair(rp.node.left, rp.dist + 1));
            }

            if (rp.node.right != null && !visited[rp.node.right.val]) {
                queue.addLast(new Pair(rp.node.right, rp.dist + 1));
            }

            // add parent
            if (map.get(rp.node) != null && !visited[map.get(rp.node).val]) {
                queue.addLast(new Pair(map.get(rp.node), rp.dist + 1));
            }
        }

        return ans;

    }

    private void dfs(TreeNode node, HashMap<TreeNode, TreeNode> map) {
        if (node == null) {
            return;
        }

        if (node.left != null) {
            map.put(node.left, node);
        }

        if (node.right != null) {
            map.put(node.right, node);
        }

        dfs(node.left, map);
        dfs(node.right, map);
    }
}