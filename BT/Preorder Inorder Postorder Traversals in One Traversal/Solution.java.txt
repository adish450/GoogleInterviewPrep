/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    private class Pair {
        TreeNode node;
        int num;

        Pair(TreeNode node, int num) {
            this.node = node;
            this.num = num;
        }
    }

    public void preInPostTraversal(TreeNode root) {
        if(root == null){
            return;
        }

        List<Integer> preOrder = new ArrayList<>();
        List<Integer> inOrder = new ArrayList<>();
        List<Integer> postOrder = new ArrayList<>();

        Stack<Pair> stack = new Stack<>();
        //insert root and start processing
        stack.push(new Pair(root,1));

        while(!stack.isEmpty()){
            
            Pair pair = stack.peek();

            if (pair.num == 1) {
                //preorder traversal
                preOrder.add(pair.val);

                //now process this node for other traversal
                pair.num++;

                //process left subtree
                if (pair.node.left != null) {
                    stack.push(new Pair(pair.node.left,1));
                }
            } else if (pair.num == 2) {
                //inorder traversal
                inOrder.add(pair.val);

                //now process this node for other traversal
                pair.num++;

                //process left subtree
                if (pair.node.right != null) {
                    stack.push(new Pair(pair.node.right,2));
                }
            } else {
                //inorder traversal
                postOrder.add(pair.val);

                //now remove this node as no traversal is left
                stack.pop();
            }
        }
    }
}