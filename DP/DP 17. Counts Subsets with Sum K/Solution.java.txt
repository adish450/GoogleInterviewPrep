import java.util.*;
import java.io.*;

public class Solution {
    public static int findWays(int num[], int tar) {
        // Write your code here.
        int n = num.length;
        int [][] dpArray = new int[n][tar + 1];
        for(int[] arr : dpArray) {
            Arrays.fill(arr, -1);
        }

        return findWays(n-1,tar,num,dpArray);
    }

    private static int findWays (int n,int tar,int[] num, int[][] dpArray) {
        
        if (tar == 0) {
            return 1;
        }

        if (n == 0){
            if (num[0] == tar){
                return 1;
            }
            return 0;
        }

        if (dpArray[n][tar] != -1) {
            return dpArray[n][tar];
        }

        long c1 = 0;

        if (num[n] <= tar)
            c1 = (int)(findWays(n-1, tar - num[n], num, dpArray) % (Math.pow(10, 9) + 7));
        long c2 = (int)(findWays(n-1, tar, num, dpArray) % (Math.pow(10, 9) + 7));

        return dpArray[n][tar] = (int)((c1 + c2) % (Math.pow(10, 9) + 7)); 
    }
}