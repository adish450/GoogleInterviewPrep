import java.util.* ;
import java.io.*; 
public class Solution {

    private static class Pair {
        int key;
        int value;

        Pair(int key, int value) {
            this.key = key;
            this.value = value;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Pair pair = (Pair) o;
            return key == pair.key && value == pair.value;
        }

        @Override
        public int hashCode() {
            return Objects.hash(key, value);
        }
    }

    public static int targetSum(int n, int target, int[] arr) {
        HashMap<Pair,Integer> map = new HashMap<>();
    	return targetSum(n-1, target, arr, map);
    }

    private static int targetSum(int n, int target, int[] arr, HashMap<Pair,Integer> map) {
    
    if (n == 0) {
        int count = 0;
        if (target + arr[0] == 0){
            count++;
        }

        if (target - arr[0] == 0) {
            count++;
        }
        return count;
    }

    Pair p = new Pair(n, target);

    if (map.containsKey(p)) {
        return map.get(p);
    }

    int c1 = 0, c2 = 0;
    c1 = targetSum(n-1, target - arr[n], arr, map);
    c2 = targetSum(n-1, target + arr[n], arr, map);

    map.put(p, c1 + c2);
    return c1 + c2;
}



}