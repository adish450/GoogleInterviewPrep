import java.util.Arrays;

public class Solution {
    public static int distinctSubsequences(String str, String sub) {
        // Write your code here.
        int n = str.length();
        int m = sub.length();

        int[][] dp = new int[n+1][m+1];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }

        return distinctSubsequences(n, m, str, sub, dp);
    }

    private static int distinctSubsequences(int idx1, int idx2, String str, String sub, int[][] dp) {
        if (idx2 == 0) {
            return 1;
        }

        if (idx1 == 0) {
            return 0;
        }

        if (dp[idx1][idx2] != -1) {
            return dp[idx1][idx2];
        }


        if (str.charAt(idx1 - 1) == sub.charAt(idx2 - 1)) {
           return dp[idx1][idx2] = (int)((distinctSubsequences(idx1 - 1, idx2 - 1, str, sub, dp) + distinctSubsequences(idx1 - 1, idx2, str, sub, dp)) % (1e9 + 7));
 
        }

        return dp[idx1][idx2] =  (int) (distinctSubsequences(idx1 - 1, idx2, str, sub, dp) % (1e9 + 7));
    }
}