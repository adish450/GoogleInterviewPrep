import java.util.Arrays;

public class Solution {
	public static boolean wildcardMatching(String pattern, String text) {
		// Write your code here.
		int n = text.length();
        int m = pattern.length();

        int[][] dp = new int[n+1][m+1];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }

		return wildcardMatching(n, m, text, pattern, dp);
	}

	private static boolean wildcardMatching(int n, int m, String text, String pattern, int[][] dp) {

		if (n == 0 && m == 0) {
			//both got exhausted
			return true;
		}
		if (n == 0) {
			for (int i = 1; i <= m; i++) {
				if (pattern.charAt(i-1) != '*') {
					return false;
				}
			}
			return true;
		}

		if (m == 0) {
			//pattern is exhausted
			return false;
		}

		if (dp[n][m] != -1) {
			if (dp[n][m] == 0) {
				return false;
			}
			return true;
		}

		boolean ans1 = false, ans2 = false;
		if (text.charAt(n-1) == pattern.charAt(m-1) || pattern.charAt(m-1) == '?') {
			ans1 = wildcardMatching(n-1, m-1, text, pattern, dp);
		}

		if (pattern.charAt(m-1) == '*') {
			ans2 = wildcardMatching(n-1, m, text, pattern, dp) || wildcardMatching(n, m-1, text, pattern, dp);
		}

		if (ans1 || ans2) {
			dp[n][m] = 1;
		} else {
			dp[n][m] = 0;
		}

		return ans1 || ans2;
	}

}
