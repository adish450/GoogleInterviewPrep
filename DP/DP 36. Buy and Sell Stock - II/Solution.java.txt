import java.util.Arrays;

public class Solution {
    public static long getMaximumProfit (int n, long[] values) {
        // Your code goes here.
        long[][] dp = new long[n][2];
        for (long[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        return getMaximumProfit(0, n, 1, values, dp);
    }

    private static long getMaximumProfit(int curr, int n, int buy, long[] values, long[][] dp) {
        if (curr == n) {
            return 0;
        }

        if (dp[curr][buy] != -1) {
            return dp[curr][buy];
        }

        long profit = 0;
        if (buy == 1) {
            profit = Math.max(-values[curr] + getMaximumProfit(curr + 1, n, 0, values, dp), getMaximumProfit(curr + 1, n, 1, values, dp));
        } else {
            profit = Math.max(values[curr] + getMaximumProfit(curr + 1, n, 1, values, dp), getMaximumProfit(curr + 1, n, 0, values, dp));
        }

        return dp[curr][buy] = profit;
        
    }
}
