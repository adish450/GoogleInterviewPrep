import java.util.Arrays;

public class Solution {
    public static int maxProfit(int[] prices) {
        // Write your code here.
        int n = prices.length;
        int[][][] dp = new int[n][2][3];
        for(int[][] arr1 : dp) {
            for (int[] arr2 : arr1) {
                Arrays.fill(arr2, -1);
            }
        }

        return maxProfit(0, n, 1, 2, prices, dp);
    }

    private static int maxProfit (int curr, int n, int buy, int transCount, int[] prices, int[][][] dp) {
        if (transCount == 0 || curr == n) {
            return 0;
        }

        if (dp[curr][buy][transCount] != -1) {
            return dp[curr][buy][transCount];
        }

        int profit = 0;

        if (buy == 1) {
            //max of buy or not buy
            profit = Math.max(-prices[curr] + maxProfit(curr + 1, n, 0, transCount, prices, dp), maxProfit(curr + 1, n, 1, transCount, prices, dp));
        } else {
            //max of sell or not sell
            profit = Math.max(prices[curr] + maxProfit(curr + 1, n, 1, transCount - 1, prices, dp), maxProfit(curr + 1, n, 0, transCount, prices, dp));
        }

        return dp[curr][buy][transCount] = profit;
    }
}