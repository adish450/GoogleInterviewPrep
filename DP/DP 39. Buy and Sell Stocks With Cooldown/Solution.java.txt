import java.util.Arrays;
public class Solution {
    public static int stockProfit(int[] prices) {
        // Write your code here.
        int n = prices.length;
        int[][] dp = new int[n][2];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        return stockProfit(0, n, 1, prices, dp);
    }

    private static int stockProfit(int curr, int n, int buy, int[] prices, int[][] dp) {
        if (curr >= n) {
            return 0;
        }

        if (dp[curr][buy] != -1) {
            return dp[curr][buy];
        }

        int profit = 0;
        if (buy == 1) {
            profit = Math.max(-prices[curr] + stockProfit(curr + 1, n, 0, prices, dp), stockProfit(curr + 1, n, 1, prices, dp));
        } else {
            profit = Math.max(prices[curr] + stockProfit(curr + 2, n, 1, prices, dp), stockProfit(curr + 1, n, 0, prices, dp));
        }

        return dp[curr][buy] = profit;

    }
}
