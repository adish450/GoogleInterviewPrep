import java.util.Arrays;
public class Solution {
    public static int maximumProfit(int[] prices, int n, int fee) {
        // Write your code here.
        int[][] dp = new int[n][2];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        return maximumProfit(0, n, 1, fee, prices, dp);
    }

    private static int maximumProfit(int curr, int n, int buy, int fee, int[] prices, int[][] dp) {
        if (curr == n) {
            return 0;
        }

        if (dp[curr][buy] != -1) {
            return dp[curr][buy];
        }

        int profit = 0;
        if (buy == 1) {
            profit = Math.max(-prices[curr] + maximumProfit(curr + 1, n, 0, fee, prices, dp), maximumProfit(curr + 1, n, 1, fee, prices, dp));
        } else {
            profit = Math.max(-fee + prices[curr] + maximumProfit(curr + 1, n, 1, fee, prices, dp), maximumProfit(curr + 1, n, 0, fee, prices, dp));
        }

        return dp[curr][buy] = profit;

    }
}