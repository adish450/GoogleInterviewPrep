import java.util.Arrays;

public class Solution {

	public static int longestIncreasingSubsequence(int arr[]) {
		//Your code goes here
		int n = arr.length;
		int max = Integer.MIN_VALUE;
		for(int i : arr) {
			max = Math.max(max, i);
		}

		int[][] dp = new int[n][max+2];
		for (int[] a : dp) {
			Arrays.fill(a, -1);
		}

		return longestIncreasingSubsequence(n-1,max+1,arr,dp);
	}

	private static int longestIncreasingSubsequence (int index, int prev, int[] arr, int[][] dp) {
		if (index < 0) {
			return 0;
		}

		if (dp[index][prev] != -1) {
			return dp[index][prev];
		}

		int len1 = Integer.MIN_VALUE;

		//take if greater than prev
		if (arr[index] < prev)
			len1 = 1 + longestIncreasingSubsequence(index - 1, arr[index], arr, dp);
		
		int len2 = longestIncreasingSubsequence(index - 1, prev, arr, dp);

		return dp[index][prev] = Math.max(len1, len2);
	}

}