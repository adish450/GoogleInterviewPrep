import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
public class Solution {
    public static List< Integer > divisibleSet(int []arr) {
        // Write your code here.
        int n = arr.length;
        Collections.sort(arr);
		int[] dp = new int[n];
		Arrays.fill(dp, 1);

		int[] hash = new int[n];
		for(int i = 0;  i < n; i++) {
			hash[i] = i;
		}

		int max = Integer.MIN_VALUE;
		int maxIndex = -1;
		for (int i = 1; i < n; i++) {
			for (int j = 0; j < i; j++) {
				if (arr[i] % arr[j] == 0 && dp[i] < dp[j] + 1) {
					dp[i] = dp[j] + 1;
					hash[i] = j;
				}
			}
			if (dp[i] > max) {
				max = dp[i];
				maxIndex = i;
			}
		}

		//back track from maxIndex till i != hash[i]
		ArrayList<Integer> list = new ArrayList<>();
		while(maxIndex != hash[maxIndex]) {
			list.add(0,arr[maxIndex]);
			maxIndex = hash[maxIndex];
		}

		return list;
    }
}