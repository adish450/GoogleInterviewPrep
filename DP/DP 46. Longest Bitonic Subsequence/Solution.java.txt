import java.util.*;
public class Solution {
    public static int longestBitonicSequence(int[] arr, int n) {
        // Write your code here.
		int[] dp1 = new int[n];
        int[] dp2 = new int[n];
		Arrays.fill(dp1, 1);
        Arrays.fill(dp2, 1);

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < i; j++) {
				if (arr[i] > arr[j] && dp1[i] < dp1[j] + 1) {
					dp1[i] = dp1[j] + 1;
				}
			}
		}

        for (int i = n-1; i >= 0; i--) {
			for (int j = n - 1; j > i; j--) {
				if (arr[i] > arr[j] && dp2[i] < dp2[j] + 1) {
					dp2[i] = dp2[j] + 1;
				}
			}
		}

        int[] bitLen = new int[n];
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            bitLen[i] = dp1[i] + dp2[i] - 1;
            max = Math.max(max, bitLen[i]);
        }

        return max;


    }
}
