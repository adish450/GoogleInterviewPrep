import java.util.Arrays;

public class Solution {
    public static int evaluateExp(String exp) {
        // Write your code here.
        int n = exp.length();
        int[][][] dp = new int[n][n][2];
        for (int[][] a : dp) {
            for (int[] b : a) {
                Arrays.fill(b, -1);
            }
        }
        return evaluateExp(0, n-1, true, exp, dp);
    }

    private static int evaluateExp(int i, int j, boolean isTrue, String exp, int[][][] dp) {
        if (i > j) {
            return 0;
        }

        if (i == j) {
            if (isTrue) {
                if (exp.charAt(i) == 'T') {
                    return 1;
                }
                return 0;
            }

            if (exp.charAt(i) == 'F') {
                return 1;
            }

            return 0;
        }

        if (isTrue && dp[i][j][1] != -1) {
            return dp[i][j][1];
        }

        if (!isTrue && dp[i][j][0] != -1) {
            return dp[i][j][0];
        }

        long ways = 0;
        int mod = 1000000007;

        for(int k = i+1; k <= j-1; k+=2) {
            long lT = evaluateExp(i, k-1, true, exp, dp) % mod;
            long rT = evaluateExp(k+1, j, true, exp, dp) % mod;
            long lF = evaluateExp(i, k-1, false, exp, dp) % mod;
            long rF = evaluateExp(k+1, j, false, exp, dp) % mod;

            if (exp.charAt(k) == '&') {
                if(isTrue) {
                    ways = (ways + (lT * rT) % mod) % mod;
                } else {
                    ways = (ways + (lT * rF) % mod + (lF * rT) % mod + (lF * rF) % mod) % mod;
                }
            } else if (exp.charAt(k) == '|') {
                if(isTrue) {
                    ways = (ways + (lT * rT) % mod + (lT * rF) % mod + (lF * rT) % mod) % mod;
                } else {
                    ways = (ways + (lF * rF) % mod) % mod;
                }
            } else {
                if(isTrue) {
                    ways = (ways + (lT * rF) % mod + (lF * rT) % mod) % mod;
                } else {
                    ways = (ways + (lT * rT) % mod + (lF * rF) % mod) % mod;
                }
            }
        }

        if (isTrue) {
            return dp[i][j][1] = (int)ways;
        } else {
            return dp[i][j][0] = (int)ways;
        }
    }
}