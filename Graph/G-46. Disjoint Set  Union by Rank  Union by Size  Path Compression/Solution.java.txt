import java.util.*;
public class HelloWorld {

	public static class DisjointSet {
		int[] rank;
		int[] parent;
		int[] size;
		
		DisjointSet(int n) {
			rank = new int[n+1];
			parent = new int[n+1];
			size = new int[n+1];
			Arrays.fill(size,1);
			
			for (int i = 0; i <= n; i++) {
				parent[i] = i;
			}
		}
		
		private int findUlP(int node) {
			if (node == parent[node]) {
				return node;
			}
			
			//path compression
			return parent[node] = findUlP(parent[node]);
		}
		
		public void unionByRank(int u, int v) {
			int p1 = findUlP(u);
			int p2 = findUlP(v);
			
			if (p1 == p2) return;
			
			if(rank[p1] > rank[p2]) { //check rank of ultimate parent
				//merge p2 in p1
				parent[p2] = p1;
			} else if(rank[p1] < rank[p2]) { //check rank of ultimate parent
				//merge p1 in p2
				parent[p1] = p2;
			} else {
				//merge anyone
				parent[p2] = p1;
				rank[p1] += 1;
			}	
		}
		
		public void unionBySize(int u, int v) {
			int p1 = findUlP(u);
			int p2 = findUlP(v);
			
			if(p1  == p2) return;
			
			if(size[p1] > size[p2]) {
				//attach p2 to p1
				parent[p2] = p1;
				size[p1] += size[p2];
			} else {
				//attach p1 to p2
				parent[p1] =  p2;
				size[p2] += size[p1];
			}
		}
	}
	public static void main(String[] args) {
		DisjointSet ds = new DisjointSet(7);
		ds.unionBySize(1,2);
		ds.unionBySize(2,3);
		ds.unionBySize(4,5);
		ds.unionBySize(6,7);
		ds.unionBySize(5,6);
		
		if(ds.findUlP(3) == ds.findUlP(7)) {
			System.out.println("Same parent");
		} else{
			System.out.println("Different parent");
		}
		
		ds.unionBySize(3,7);
		
		if(ds.findUlP(3) == ds.findUlP(7)) {
			System.out.println("Same parent");
		} else{
			System.out.println("Different parent");
		}
	}
}